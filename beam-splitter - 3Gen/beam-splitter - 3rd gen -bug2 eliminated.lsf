clear;
for(mm=1;mm<=10000;mm=mm+1)
{

?num2str(mm)+'次';

beilv=4;##倍率是监视器宽度与波导宽度的比值【需设置】
f_n=51;#频率取样点数量【需统一】
st_lambda=1.45;#扫描起始波长【需统一】
end_lambda=1.65;#扫描截止波长【需统一】
delta_lambda=(end_lambda-st_lambda)/(f_n-1);#计算频率间隔
matlab("
clear;
clear all;
clc;

flag1=1;
i=1;
while (flag1>0)%%判定该初始化的点是否会产生曲率半径过小的部分，以至于波导的结构十分奇怪
    [num2str(i) '次生成控制点'];
    i=i+1;
    w=0.5;%%波导的宽度【需设置】
    jin=5*rand()-2.5;
    chu=5*rand()-2.5;
    input=[0 jin;5*rand() jin;-5*rand+5 chu;5 chu];%%输入三阶贝塞尔曲线的四个控制点【需设置】
    %input =...
    % ...
    %  [        0   2.02361
    %     3.08833   2.02361
    %     0.702788    0.549333
    %     5.0000    0.549333];
    t=linspace(0,1,100);%%取点密度即为括号后第三个参数【需控制】
    t=t';
    n=length(t);
    dian=zeros(n,2);
    dian(:,1)=input(1,1)*(1-t).^3+input(2,1)*3*t.*(1-t).^2+input(3,1)*3*(t.^2).*(1-t)+input(4,1)*t.^3;
    dian(:,2)=input(1,2)*(1-t).^3+input(2,2)*3*t.*(1-t).^2+input(3,2)*3*(t.^2).*(1-t)+input(4,2)*t.^3;
    %%以上三行即为曲线上的离散的点
    daoshu1=zeros(n,3);
    daoshu1(:,1)=-3*input(1,1)*(1-t).^2+input(2,1)*3*(3*t-1).*(t-1)+input(3,1)*3*t.*(2-3*t)+3*input(4,1)*t.^2;
    daoshu1(:,2)=-3*input(1,2)*(1-t).^2+input(2,2)*3*(3*t-1).*(t-1)+input(3,2)*3*t.*(2-3*t)+3*input(4,2)*t.^2;
    daoshu1(:,3)=daoshu1(:,2)./daoshu1(:,1);
    %%以上四行是为求一阶导数，其中daoshu1（:,3）为daoshu1的第三列，为相应点的一阶导数
    daoshu2=zeros(n,3);
    daoshu2(:,1)=(-3*input(1,1)*(1-t).^2+input(2,1)*3*(3*t-1).*(t-1)+input(3,1)*3*t.*(2-3*t)+3*input(4,1)*t.^2).^2;
    daoshu2(:,2)=6*input(1,2)*(1-t)+input(2,2)*3*(6*t-4)+input(3,2)*3*(2-6*t)+6*input(4,2)*t;
    daoshu2(:,3)=daoshu2(:,2)./daoshu2(:,1);
    %%以上四行是为求二阶导数，其中daoshu2（:,3）为daoshu2的第三列，为相应点的二阶导数
    qulv=abs(daoshu2(:,3))./( ( 1+daoshu1(:,3).^2 ).^(3/2) );%%曲率公式求得每一点的曲率
    r=1./qulv;%%求得每一点的曲率半径
    flag1=(r<w/2);%%用于判定是否曲线上有部分的曲率半径是小于宽度的一半的
    flag1=sum(flag1);
end%%判定该初始化的点是否会产生曲率半径过小的部分，以至于波导的结构十分奇怪
shangdian=zeros(n,2);
xiadian=zeros(n,2);
for i=1:n%%生成外圈和内圈的点
    k=daoshu1(i,3);
    flag=daoshu1(i,1);
     if k>0
         if flag>0
             theta=atan(k);
         else
             theta=atan(k)-pi;
         end
     else
         if flag>0
             theta=atan(k);
         else
             theta=atan(k)-pi;
         end
     end         
     shangdian(i,1)=dian(i,1)+w/2*cos(theta+pi/2);
     shangdian(i,2)=dian(i,2)+w/2*sin(theta+pi/2);
     xiadian(n+1-i,1)=dian(i,1)+w/2*cos(theta-pi/2);
     xiadian(n+1-i,2)=dian(i,2)+w/2*sin(theta-pi/2);  
end%%生成外圈和内圈的点

");
matlabget(shangdian);
matlabget(xiadian);
matlabget(input);
matlabget(n);
matlabget(w);
input1=input;
w1=w;
shuru=input(1,:);
shuchu1=input(4,:);
V=matrix(n*2,2);
V(1:n,1)=shangdian(1:n,1)*1e-6;
V(1:n,2)=shangdian(1:n,2)*1e-6;
V(n+1:2*n,1)=xiadian(1:n,1)*1e-6;
V(n+1:2*n,2)=xiadian(1:n,2)*1e-6;


select("through");
set("vertices",V);
set("x",0);
set("y",0);
set("z",0.11e-6);
set("z span",0.22e-6);
set('material','Si (Silicon) - Palik');
set("override mesh order from material database",1);
set("mesh order",1);
set("alpha",1);




#######################################################################################
f=1;

for(0;f>=0;0)
{
matlab("
clear;
clear all;
clc;
flag1=1;
i=1;
while (flag1>0)%%判定该初始化的点是否会产生曲率半径过小的部分，以至于波导的结构十分奇怪
    [num2str(i) '次生成控制点'];
    i=i+1;
    w=0.5;%%波导的宽度【需设置】
    jin=5*rand()-2.5;
    chu=5*rand()-2.5;
    input=[0 jin;5*rand() jin;-5*rand+5 chu;5 chu];%%输入三阶贝塞尔曲线的四个控制点【需设置】
     %input =...
     %...
     % [        0   0.108249
     %    4.09074   0.108249
     %    0.912265    -2.01635
     %    5.0000    -2.01635];
    t=linspace(0,1,100);%%取点密度即为括号后第三个参数【需控制】
    t=t';
    n=length(t);
    dian=zeros(n,2);
    dian(:,1)=input(1,1)*(1-t).^3+input(2,1)*3*t.*(1-t).^2+input(3,1)*3*(t.^2).*(1-t)+input(4,1)*t.^3;
    dian(:,2)=input(1,2)*(1-t).^3+input(2,2)*3*t.*(1-t).^2+input(3,2)*3*(t.^2).*(1-t)+input(4,2)*t.^3;
    %%以上三行即为曲线上的离散的点
    daoshu1=zeros(n,3);
    daoshu1(:,1)=-3*input(1,1)*(1-t).^2+input(2,1)*3*(3*t-1).*(t-1)+input(3,1)*3*t.*(2-3*t)+3*input(4,1)*t.^2;
    daoshu1(:,2)=-3*input(1,2)*(1-t).^2+input(2,2)*3*(3*t-1).*(t-1)+input(3,2)*3*t.*(2-3*t)+3*input(4,2)*t.^2;
    daoshu1(:,3)=daoshu1(:,2)./daoshu1(:,1);
    %%以上四行是为求一阶导数，其中daoshu1（:,3）为daoshu1的第三列，为相应点的一阶导数
    daoshu2=zeros(n,3);
    daoshu2(:,1)=(-3*input(1,1)*(1-t).^2+input(2,1)*3*(3*t-1).*(t-1)+input(3,1)*3*t.*(2-3*t)+3*input(4,1)*t.^2).^2;
    daoshu2(:,2)=6*input(1,2)*(1-t)+input(2,2)*3*(6*t-4)+input(3,2)*3*(2-6*t)+6*input(4,2)*t;
    daoshu2(:,3)=daoshu2(:,2)./daoshu2(:,1);
    %%以上四行是为求二阶导数，其中daoshu2（:,3）为daoshu2的第三列，为相应点的二阶导数
    qulv=abs(daoshu2(:,3))./( ( 1+daoshu1(:,3).^2 ).^(3/2) );%%曲率公式求得每一点的曲率
    r=1./qulv;%%求得每一点的曲率半径
    flag1=(r<w/2);%%用于判定是否曲线上有部分的曲率半径是小于宽度的一半的
    flag1=sum(flag1);
end%%判定该初始化的点是否会产生曲率半径过小的部分，以至于波导的结构十分奇怪
shangdian=zeros(n,2);
xiadian=zeros(n,2);
for i=1:n%%生成外圈和内圈的点
    k=daoshu1(i,3);
    flag=daoshu1(i,1);
     if k>0
         if flag>0
             theta=atan(k);
         else
             theta=atan(k)-pi;
         end
     else
         if flag>0
             theta=atan(k);
         else
             theta=atan(k)-pi;
         end
     end         
     shangdian(i,1)=dian(i,1)+w/2*cos(theta+pi/2);
     shangdian(i,2)=dian(i,2)+w/2*sin(theta+pi/2);
     xiadian(n+1-i,1)=dian(i,1)+w/2*cos(theta-pi/2);
     xiadian(n+1-i,2)=dian(i,2)+w/2*sin(theta-pi/2);  
end%%生成外圈和内圈的点

");


matlabget(shangdian);
matlabget(xiadian);
matlabget(n);
matlabget(input);
input2=input;
shuchu2=input(4,:);
matlabget(w);
w2=w;
V=matrix(n*2,2);
V(1:n,1)=shangdian(1:n,1)*1e-6;
V(1:n,2)=shangdian(1:n,2)*1e-6;
V(n+1:2*n,1)=xiadian(1:n,1)*1e-6;
V(n+1:2*n,2)=xiadian(1:n,2)*1e-6;


if(w1>w2){
 w_max=w1;
 w_min_w2; 
}
else{
 w_max=w2;
 w_min=w1;   
}

gap=abs(shuchu2(2)-shuchu1(2))-w_min/2;
monitor_middle_width=w_max*beilv/2;
f=monitor_middle_width-gap;

}

select("ano");
set("vertices",V);
set("x",0);
set("y",0);
set("z",0.11e-6);
set("z span",0.22e-6);
set('material','Si (Silicon) - Palik');
set("override mesh order from material database",1);
set("mesh order",1);
set("alpha",1);

select("shuru");
set("x min",-10e-6);
set("x max",0);
set("y",shuru(2)*1e-6);
set("y span",w1*1e-6);
set("z",0.11e-6);
set("z span",0.22e-6);
set('material','Si (Silicon) - Palik');
set("override mesh order from material database",1);
set("mesh order",1);
set("alpha",1);

select("shuchu1");
set("x min",5e-6);
set("x max",15e-6);
set("y",shuchu1(2)*1e-6);
set("y span",w1*1e-6);
set("z",0.11e-6);
set("z span",0.22e-6);
set('material','Si (Silicon) - Palik');
set("override mesh order from material database",1);
set("mesh order",1);
set("alpha",1);

select("shuchu2");
set("x min",5e-6);
set("x max",15e-6);
set("y",shuchu2(2)*1e-6);
set("y span",w2*1e-6);
set("z",0.11e-6);
set("z span",0.22e-6);
set('material','Si (Silicon) - Palik');
set("override mesh order from material database",1);
set("mesh order",1);
set("alpha",1);

select("source_TE");
set("y",shuru(2)*1e-6);
set("y span",5*w1*1e-6);
set("z",0.11e-6);
set("z span",4e-6);

select("source_TM");
set("y",shuru(2)*1e-6);
set("y span",5*w1*1e-6);
set("z",0.11e-6);
set("z span",4e-6);

select("shuchu1_m");
set("y",shuchu1(2)*1e-6);
set("y span",beilv*w1*1e-6);
set("z",0.11e-6);
set("z span",4e-6);
select("shuchu1_expan_TE");
set("y",shuchu1(2)*1e-6);
set("y span",beilv*w1*1e-6);
set("z",0.11e-6);
set("z span",4e-6);
select("shuchu1_expan_TM");
set("y",shuchu1(2)*1e-6);
set("y span",beilv*w1*1e-6);
set("z",0.11e-6);
set("z span",4e-6);


select("shuchu2_m");
set("y",shuchu2(2)*1e-6);
set("y span",beilv*w2*1e-6);
set("z",0.11e-6);
set("z span",4e-6);
select("shuchu2_expan_TE");
set("y",shuchu2(2)*1e-6);
set("y span",beilv*w2*1e-6);
set("z",0.11e-6);
set("z span",4e-6);
select("shuchu2_expan_TM");
set("y",shuchu2(2)*1e-6);
set("y span",beilv*w2*1e-6);
set("z",0.11e-6);
set("z span",4e-6);


select("source_TE");
set('enabled',1);
select("source_TM");
set('enabled',0);


run;
shuchu1_TE=getresult('shuchu1_expan_TE','expansion for shuchu1');
shuchu2_TE=getresult('shuchu2_expan_TE','expansion for shuchu2');
out1_TE_T=shuchu1_TE.T_net;
out1_TE_phase=angle(shuchu1_TE.a);
out2_TE_T=shuchu2_TE.T_net;
out2_TE_phase=angle(shuchu2_TE.a);

TE_phase_difference=out1_TE_phase-out2_TE_phase;
switchtolayout;

select("source_TE");
set('enabled',0);
select("source_TM");
set('enabled',1);

run;
shuchu1_TM=getresult('shuchu1_expan_TM','expansion for shuchu1');
shuchu2_TM=getresult('shuchu2_expan_TM','expansion for shuchu2');
out1_TM_T=shuchu1_TM.T_net;
out1_TM_phase=angle(shuchu1_TM.a);
out2_TM_T=shuchu2_TM.T_net;
out2_TM_phase=angle(shuchu2_TM.a);

TM_phase_difference=out1_TM_phase-out2_TM_phase;




tem=matrix(f_n+1,19);
tem(1,1)=mm;
tem(1,2)=w1;
tem(1,3)=input1(1,1);
tem(1,4)=input1(1,2);
tem(1,5)=input1(2,1);
tem(1,6)=input1(2,2);
tem(1,7)=input1(3,1);
tem(1,8)=input1(3,2);
tem(1,9)=input1(4,1);
tem(1,10)=input1(4,2);
tem(1,11)=w2;
tem(1,12)=input2(1,1);
tem(1,13)=input2(1,2);
tem(1,14)=input2(2,1);
tem(1,15)=input2(2,2);
tem(1,16)=input2(3,1);
tem(1,17)=input2(3,2);
tem(1,18)=input2(4,1);
tem(1,19)=input2(4,2);
record=1;##如果算出来的数值是出现比较严重的误差，record被置为0，数据正常的话，record默认为1
for(i=2;i<=f_n+1;i=i+1){
    ratio_10_TE=(out1_TE_T(i-1)/out2_TE_T(i-1));
    insertion_loss_10_TE=1-out1_TE_T(i-1)-out2_TE_T(i-1);
    ratio_10_TM=(out1_TM_T(i-1)/out2_TM_T(i-1));
    insertion_loss_10_TM=1-out1_TM_T(i-1)-out2_TM_T(i-1);
    if ( (ratio_10_TE<0) or (ratio_10_TM<0) ){
        record=0;    
    }
    
    tem(i,1)=st_lambda+(i-2)*delta_lambda;
    tem(i,2)=out1_TE_T(i-1);
    tem(i,3)=out2_TE_T(i-1);
    tem(i,4)=TE_phase_difference(i-1);
    tem(i,5)=out1_TM_T(i-1);
    tem(i,6)=out2_TM_T(i-1);
    tem(i,7)=TM_phase_difference(i-1);
    tem(i,8)=0;
    tem(i,9)=0;
    tem(i,10)=0;
    tem(i,11)=0;
    tem(i,12)=0;
    tem(i,13)=0;
    tem(i,14)=0;
    tem(i,15)=0;
    tem(i,16)=0;
    tem(i,17)=0;
    tem(i,18)=0;
    tem(i,19)=0; 
}


if(record=1){
    ##序号 贯通波导宽度 点1 点2 点3 点4 另一波导宽度 点1 点2 点3 点4 
    write("data - 3rd gen - test.txt",num2str(tem));
}
else{
    mm=mm-1;
        
}

switchtolayout;
}